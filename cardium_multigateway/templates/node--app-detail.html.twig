{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}

{{ attach_library('cardium_multigateway/my-apps') }}
{{ attach_library('cardium_sync/datatable') }}

{%
  set classes = [
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
  ]
%}
<div id="app-details-page">
  <div class="page-title-cta-wrap d-flex justify-content-between align-items-center">
    <div class="page-title">
      <h1>{{ label }}</h1>
    </div>
{#    <div class="cta-wrap">#}
{#      <a href="/node/{{ node.id }}/edit" class="button text-decoration-none">#}
{#        {{"Edit"|t([],{'context':'App Details' })}}#}
{#      </a>#}
{#      <a href="/node/{{ node.id }}/delete" class="button text-decoration-none">#}
{#        {{"Delete"|t([],{'context':'App Details' })}}#}
{#      </a>#}
{#    </div>#}
  </div>      
  <article{{ attributes.addClass(classes) }}>
    <div{{ content_attributes.addClass('node__content', 'clearfix') }}>
      <div class="three-col-wrap d-flex justify-content-between align-items-center">
        <div class="each-col d-flex">
          <img src="{{img_path}}/company-icon.svg" alt="{{"email"|t([],{'context':'App Details' })}}">
          <span class="text">{{ "Business Email: "|t({}, {'context' : 'App Detail'}) }} </span>
          <span class="link-info"> {{ content.field_business_email }}</span>
        </div>
        <div class="each-col d-flex">         
          {% if node.field_app_company_name is not empty %}
            <img src="{{img_path}}/email-icon.svg" alt="{{"company icon"|t([],{'context':'App Details' })}}">
            <span class="text">{{ "Company Name: "|t({}, {'context' : 'App Detail'}) }} </span>
            <span class="link-info"> {{ content.field_app_company_name }}</span>
          {% endif %}          
        </div>
        <div class="each-col d-flex">
          {% if node.field_app_callback_url is not empty %}
            <img src="{{img_path}}/link-icon.svg" alt="{{"url"|t([],{'context':'App Details' })}}">
            <span class="text">{{ "Callback Url: "|t({}, {'context' : 'App Detail'}) }} </span>
            <span class="link-info"> {{ content.field_app_callback_url }}</span>
          {% endif %}
        </div>
      <div>                        
    </div>
  </article>
  <table class="sync-datatable">
    <thead>
      <tr>
        <th>{{ "API "|t({}, {'context' : 'App Detail'}) }}</th>
        <th>{{ "Category "|t({}, {'context' : 'App Detail'}) }}</th>
        <th>{{ "Consumer Key "|t({}, {'context' : 'App Detail'}) }}</th>
        <th>{{ "Consumer Secret "|t({}, {'context' : 'App Detail'}) }}</th>
      </tr>
    </thead>
    {% for value in data %}
      <tr>
        <td><a href="{{ value.title_link }}">{{ value.title }}</a></td>
        <td>{{ value.gateway }}</td>
        <td>
          <div class="key-icon">
            <span class="eye-icon">
              <img src="{{img_path}}/eye-icon.svg" alt="{{"consumer key"|t([],{'context':'App Details' })}}">
            </span>
            <span class="consumer-value">{{ value.client_id }}</span>
          </div>
        </td>
        <td>
        {% if value.client_sec is not empty %}
          <div class="key-icon">
            <span class="eye-icon">
              <img src="{{img_path}}/eye-icon.svg" alt="{{"consumer secret"|t([],{'context':'App Details' })}}">
            </span>
            <span class="consumer-value">{{ value.client_sec }}</span>
          <div>
        {% else %}
          <span> - </span>
        {% endif %}
        </td>
      </tr>
    {% endfor %}
  </table> 
</div>
